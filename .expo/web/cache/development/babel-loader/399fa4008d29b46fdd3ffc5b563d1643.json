{"ast":null,"code":"import _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"children\"];\nimport React from 'react';\nimport { useTheme } from 'native-base';\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport { useColorMode } from \"../../../core/color-mode/hooks\";\nexport var HiddenSSR = React.memo(function (_ref) {\n  var children = _ref.children,\n    props = _objectWithoutProperties(_ref, _excluded);\n  var theme = useTheme();\n  var breakPoints = Object.keys(theme.breakpoints);\n  var currentColorMode = useColorMode();\n  var from = props.from,\n    till = props.till,\n    only = props.only,\n    colorMode = props.colorMode,\n    platform = props.platform;\n  if (children === null) return null;\n  if (!from && !till && !only && !colorMode && !platform) {\n    return null;\n  } else if (Array.isArray(platform) && platform.includes(Platform.OS) || platform === Platform.OS) {\n    return null;\n  } else if (colorMode === currentColorMode.colorMode) {\n    return null;\n  }\n  var display = {};\n  if (till) {\n    var flag = false;\n    for (var i in breakPoints) {\n      if (breakPoints[i] === till) {\n        display[breakPoints[i]] = 'flex';\n        flag = true;\n      } else {\n        display[breakPoints[i]] = flag ? 'flex' : 'none';\n      }\n    }\n  }\n  if (from) {\n    var _flag = false;\n    for (var _i in breakPoints) {\n      if (breakPoints[_i] === from || _flag) {\n        display[breakPoints[_i]] = 'none';\n        _flag = true;\n      } else {\n        display[breakPoints[_i]] = 'flex';\n      }\n    }\n  }\n  if (only) {\n    if (Array.isArray(only)) {\n      for (var _i2 in breakPoints) {\n        if (only.includes(breakPoints[_i2])) {\n          display[breakPoints[_i2]] = 'none';\n        } else {\n          display[breakPoints[_i2]] = 'flex';\n        }\n      }\n    } else {\n      display[only] = 'none';\n    }\n  }\n  return React.cloneElement(children, {\n    display: display\n  });\n});","map":{"version":3,"mappings":"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","names":["React","useTheme","useColorMode","HiddenSSR","memo","children","props","theme","breakPoints","Object","keys","breakpoints","currentColorMode","from","till","only","colorMode","platform","Array","isArray","includes","Platform","OS","display","flag","i","cloneElement"],"sources":["HiddenSSR.tsx"],"sourcesContent":["import React from 'react';\nimport { useTheme } from 'native-base';\nimport { Platform } from 'react-native';\nimport type { IHiddenProps } from './types';\nimport { useColorMode } from '../../../core/color-mode/hooks';\n\nexport const HiddenSSR = React.memo(({ children, ...props }: IHiddenProps) => {\n  const theme = useTheme();\n  const breakPoints = Object.keys(theme.breakpoints);\n  const currentColorMode = useColorMode();\n\n  const { from, till, only, colorMode, platform } = props;\n\n  if (children === null) return null;\n  if (!from && !till && !only && !colorMode && !platform) {\n    return null;\n  } else if (\n    (Array.isArray(platform) && platform.includes(Platform.OS)) ||\n    platform === Platform.OS\n  ) {\n    return null;\n  } else if (colorMode === currentColorMode.colorMode) {\n    return null;\n  }\n  const display: any = {};\n\n  if (till) {\n    let flag = false;\n    for (const i in breakPoints) {\n      if (breakPoints[i] === till) {\n        display[breakPoints[i]] = 'flex';\n        flag = true;\n      } else {\n        display[breakPoints[i]] = flag ? 'flex' : 'none';\n      }\n    }\n  }\n\n  if (from) {\n    let flag = false;\n    for (const i in breakPoints) {\n      if (breakPoints[i] === from || flag) {\n        display[breakPoints[i]] = 'none';\n        flag = true;\n      } else {\n        display[breakPoints[i]] = 'flex';\n      }\n    }\n  }\n  if (only) {\n    if (Array.isArray(only)) {\n      for (const i in breakPoints) {\n        if (only.includes(breakPoints[i])) {\n          display[breakPoints[i]] = 'none';\n        } else {\n          display[breakPoints[i]] = 'flex';\n        }\n      }\n    } else {\n      display[only] = 'none';\n    }\n  }\n\n  return React.cloneElement(children, {\n    display: display,\n  });\n});\n"]},"metadata":{},"sourceType":"module"}